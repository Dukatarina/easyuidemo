package com.xxx.demo.rest;

import com.xxx.demo.Enum.Status;
import com.xxx.demo.query.PersonQuery;
import com.xxx.demo.vo.EcharsVo;
import com.xxx.demo.vo.Person;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.Collectors;

@Controller
public class PersonController {
    private static List<Person> persons = new ArrayList<>();

    static {
        Person person1 = new Person("001", "ashe", 24, new Date(), "弗雷尔卓德", Status.enabled, Arrays.asList(28, 30, 0, 20));
        Person person3 = new Person("004", "lux", 22, new Date(), "德玛西亚", Status.accountNonLocked, Arrays.asList(28, 30, 20, 0));
        Person person4 = new Person("005", "lulu", 129, new Date(), "班德尔城", Status.accountNonExpired, Arrays.asList(28, 30, 20));
        Person person21 = new Person("003", "jinx", 20, new Date(), "皮尔吉沃特", Status.credentialsNonExpired, Arrays.asList(0, 28, 30, 20));
        Person person51 = new Person("002", "katarina", 18, new Date(), "诺克萨斯", Status.credentialsNonExpired, Arrays.asList(0, 28, 30, 20));
        Person person1114 = new Person("1114", "sona", 22, new Date(), "德玛西亚", Status.accountNonLocked, Arrays.asList(28, 0, 30, 20));
        Person person1115 = new Person("1115", "Morgana", 122, new Date(), "德玛西亚", Status.accountNonLocked, Arrays.asList(28, 0, 30, 20));
        Person person2224 = new Person("2224", "Kayle", 122, new Date(), "德玛西亚", Status.accountNonLocked, Arrays.asList(28, 30, 0, 20));

        persons.add(person1);
        persons.add(person3);
        persons.add(person4);
        persons.add(person21);
        persons.add(person51);
        persons.add(person1114);
        persons.add(person1115);
        persons.add(person2224);
    }

    @GetMapping("/personProcessIndex")
    public String personProcessIndex() {
        return "personProcessIndex";
    }
    @GetMapping("/tabs")
    public String tabs() {
        return "tabs";
    }
    @GetMapping("/layout")
    public String layout() {
        return "layout";
    }


    @RequestMapping("/persons")
    @ResponseBody
    public List<Person> persons(PersonQuery query) {
        if (!StringUtils.isEmpty(query.getKeywords())) {
            List<Person> people = persons.stream().filter(e -> e.getName().contains(query.getKeywords())).collect(Collectors.toList());
            return people;
        }
        System.out.println(query);
        return persons;
    }

    @GetMapping("/person")
    @ResponseBody
    public Person person(String id) {
        Optional<Person> person = persons.stream().filter(e -> e.getId().equals(id)).findFirst();
        return person.get();
    }

    @PostMapping("/person/delete")
    public ResponseEntity<String> delete(String[] id) {
        for (String i : id) {
            persons.removeIf(person -> person.getId().equals(i));
        }
        System.out.println(Arrays.toString(id));
        return ResponseEntity.ok("ok");
    }

    @PostMapping("/person/add")
    public ResponseEntity<String> add(Person person) {
        persons.add(person);
        return ResponseEntity.ok("ok");
    }

    @PostMapping("/person/update")
    public ResponseEntity<String> update(Person person) {
        persons.removeIf(p -> p.getId().equals(person.getId()));
        persons.add(person);
        return ResponseEntity.ok("ok");
    }

    @GetMapping("/autoGeneratedTdDemo")
    public String autoGeneratedTdDemo(Model model) {
        List<String> list = Arrays.asList("攻击", "暴击", "法伤", "法爆", "护甲");

        model.addAttribute("result", persons);
        model.addAttribute("list", list);

        return "autoGeneratedTdDemo";
    }

    @PostMapping("/echars/demo")
    @ResponseBody
    public List<EcharsVo> demo() {
        List<EcharsVo> vos = new ArrayList<>();
        Set<String> set = new HashSet<>();
        for (Person person : persons) {
            set.add(person.getName());
        }
        for (String s : set) {
            EcharsVo vo = new EcharsVo();
            vo.setName(s);
            vo.setValue(0);
            for (Person person : persons) {
                if (person.getName().equals(s)) {
                    vo.setValue(vo.getValue() + 1);
                }
            }
            vos.add(vo);
        }
        return vos;
    }
}
